from copy import copy


class ValidationError(Exception):
    pass


class ItemPatcher:
    def apply_patch(self, content, patch):
        """
        Write your code to apply patch to file content.
        :param content: (str) file content
        :param patch: patch objects
        """
        pass

    def apply(self, content, patch):
        new_content = self.apply_patch(content, patch)
        self.validate(new_content)

        return new_content

    def validate(self, file_obj):
        pass


class SettingsPatcher(ItemPatcher):

    def apply_patch(self, content, patch_obj):
        # Now Just add code to end of file
        #TODO: reformat code reindent.py?/?
        patch = '\n'.join(patch_obj)
        content += '\n%s\n' % patch
        return content


class MiddlewarePatcher(ItemPatcher):
    pass


class AppsPatcher(ItemPatcher):
    pass


class UrlsPatcher(ItemPatcher):
    pass


class _Files:
    def __init__(self):
        self.files = {}

    def open(self, path):
        if not path in self.files:
            with open(path, 'r') as f:
                self.files[path] = f.read()

        return self.files[path]

    def write(self, path):
        if not path in self.files:
            return

        with open(path, 'w') as f:
            f.write(self.files[path])

    def write_all(self):
        # Write all changes to files
        for path, content in self.files.items():
            with open(path, 'w') as f:
                print content
                f.write(content)

    def update(self, path, content):
        self.files[path] = content


class Patcher:

    patchers = {
        'middleware': MiddlewarePatcher(),
        'settings': SettingsPatcher(),
        'apps': AppsPatcher(),
        'urls': UrlsPatcher()
    }

    def __init__(self):
        """
        Add patches to Django settings and urls file
        """
        self.files = _Files()

    def patch(self, patch_obj):
        """
        Add code to django settings and urls files
        :param patch_obj: Object, generated by confugurtor.Configurator
        """

        try:
            for patcher_name, patcher_obj in patch_obj.items():
                # Get file content for given file patch
                file_content = self.files.open(patcher_obj['file_path'])
                # Apply patch to file content
                chenged_file_content = self.patchers[patcher_name].apply(file_content, patcher_obj['patch'])
                # Update file content in memory for the next patch
                self.files.update(patcher_obj['file_path'], chenged_file_content)
        except ValidationError:
            #TODO
            pass

        self.files.write_all()

    @classmethod
    def available_patchers(cls):
        return cls.patchers.keys()


